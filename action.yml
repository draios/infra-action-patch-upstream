name: 'Checkout the x (or latest) upstream version and apply a patch'
description: Checkout the x (or latest) upstream version and apply a patch

outputs:
  latest:
    description: "True/False if we used the last tag from upstream or not"
    value: ${{ (steps.check_last_tag.outputs.tag == '') }}
  tag:
    description: "Upstream tag ref checked out and patched"
    value: ${{ steps.check_last_tag.outputs.tag }}
  tag_major:
    description: "Upstream tag major semver"
    value: ${{ steps.major_minor.outputs.major }}
  tag_minor:
    description: "Upstream tag major minor"
    value: ${{ steps.major_minor.outputs.minor }}
  tag_patch:
    description: "Upstream tag major patch"
    value: ${{ steps.major_minor.outputs.patch }}

inputs:
  upstream_repo:
    description: "The upstream repo that we want to checkout and patch"
    required: true

  upstream_ref:
    description: "The upstream ref, can be: branch, tag, sha, if not provided last semver tag will be grabbed"
    required: false

  upstream_tag_regex:
    description: "Regex to use while checking the last upstream versions"
    required: false

  local_patch_dir:
    description: "Directory of the patch files, must end with .patch"
    required: true

  remove_from_upstream:
    description: "Line separated list of files to remove from upstream repository"
    required: false

runs:
  using: "composite"
  steps:
    # Only run when upstream_ref was not provided
    - name: Check last tag in upstream repo
      id: check_last_tag
      uses: oprypin/find-latest-tag@v1.1.1
      if: ${{ inputs.upstream_ref == '' }}
      with:
        repository: ${{ inputs.upstream_repo }}
        regex:  ${{ inputs.upstream_tag_regex }}

    - name: Extract Major and minor version
      id: major_minor
      if: steps.check_last_tag.outcome == 'success'
      shell: bash
      env:
        TAG: ${{ steps.check_last_tag.outputs.tag }}
      run: |
        # Little bash-ism to avoid use an external
        # action only for semver parsing
        VERSION="${TAG//v}"
        v=( ${VERSION//./ } )
        printf "Major is %s \n" ${v[0]}
        printf "Minor is %s \n" ${v[1]}
        printf "Patch is %s \n" ${v[2]}
        echo "major=${v[0]}" >> $GITHUB_OUTPUT
        echo "minor=${v[1]}" >> $GITHUB_OUTPUT
        echo "patch=${v[2]}" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v3.5.2
      name: Checkout latest version
      if: ${{ inputs.upstream_ref == '' }}
      with:
        repository: ${{inputs.upstream_repo }}
        ref: ${{ steps.check_last_tag.outputs.tag }}
        path: 'upstream'

    - uses: actions/checkout@v3.5.2
      name: Checkout the fixed version
      if: ${{ inputs.upstream_ref != '' }}
      with:
        repository: ${{inputs.upstream_repo }}
        ref: ${{ inputs.upstream_ref }}
        path: 'upstream'

    - uses: actions/checkout@v3.5.2
      name: Checkout local repo
      with:
        path: 'patch'

    - name: Apply Patch files
      shell: bash
      env:
        PATCHDIR: ${{ inputs.local_patch_dir }}
      run: for p in patch/${PATCHDIR}/*.patch; do patch -d upstream/ -p1 < $p; done

    - name: Remove from upstream
      id: remove_from_upstream
      if: ${{ inputs.remove_from_upstream != '' }}
      shell: bash
      run: |
        FILES=$(echo "${{ inputs.remove_from_upstream }}" | tr '\n' ' ')
        for file in ${FILES}; do
          [[ -f "upstream/${file}" ]] && rm -v "upstream/${file}" || true
        done
